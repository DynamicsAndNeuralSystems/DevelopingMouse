%% 1. Import acronyms from Structure
% Script for importing data from the following text file:
%
%    D:\Data\DevelopingAllenMouseAPI-master\API data\structureData_level5_clean.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/20 16:56:10

%% Initialize variables.
if ~exist('structureData_level5_clean.csv','file')
    error('structureData_level5_clean.csv is missing')
end
filename = 'structureData_level5_clean.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column2: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
acronym = dataArray{:, 1};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% 2. Import colour from Structure
% Script for importing data from the following text file:
%
%    D:\Data\DevelopingAllenMouseAPI-master\API data\structureData_level5_clean.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/20 16:57:11

%% Initialize variables.
filename = 'structureData_level5_clean.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column4: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
color_hex_triplet = dataArray{:, 1};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;


%% 3. Import ID from Structure
% Script for importing data from the following text file:
%
%    D:\Data\DevelopingAllenMouseAPI-master\API data\structureData_level5_clean.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/20 17:03:42

%% Initialize variables.
filename = 'structureData_level5_clean.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column11: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%f%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
id = dataArray{:, 1};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% 4. Import structure ID from Structure Center
%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\Data\DevelopingAllenMouseAPI-master\API data\structureCenters_level5.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/20 20:12:30

%% Initialize variables.
if ~exist ('structureCenters_level5.csv','file')
    error('structureCenters_level5.csv is missing')
end
filename = 'structureCenters_level5.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column4: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%f%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
structure_id = dataArray{:, 1};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% 

%% 5. Import reference space ID from Structure Center.
%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\Data\DevelopingAllenMouseAPI-master\API data\structureCenters_level5.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/20 17:14:39

%% Initialize variables.
filename = 'structureCenters_level5.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%f%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
reference_space_id = dataArray{:, 1};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% 6. Import acronym path (unsorted)
% Script for importing data from the following text file:
%
%    D:\Data\DevelopingAllenMouseAPI-master\API data\AcronymPath_level5_clean.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/23 15:50:59

%% Initialize variables.
if ~exist('AcronymPath_level5_clean.csv','file')
    error('AcronymPath_level5_clean.csv is missing')
end
filename = 'AcronymPath_level5_clean.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));


%% Split data into numeric and cell columns.
rawNumericColumns = {};
rawCellColumns = raw(:, [1,2]);


%% Create output variable
acronymPathlevel5clean = raw;
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawCellColumns;

%% import level 3 acronym and color
if ~exist('structureData_level3_clean.csv','file')
    error('structureData_level3_clean.csv is missing')
end
[~,acronym_level3,~]=xlsread('structureData_level3_clean.csv',1,'B2:B20');
[~,color_level3,~]=xlsread('structureData_level3_clean.csv',1,'D2:D20');
%% Import coordinates from Structure Center
coOrds=csvread('structureCenters_level5.csv',1,4,[1,4,805,6]);
%%
% User input; must leave it as empty string ' ' if 'scaledSigmoid'; options:' ', 'zscore','log2';
whatNorm='log2';
% User input: which field from DevMouseGeneExpression you want to use: 'norm' or normStructure';
% 'norm' is normalized across genes using a method specified in file name,
% or otherwise ScaledSigmoid; if normStructure is chosen, it doesn't matter
% what "whatNorm" is as long as the DevMouseGeneExpression.mat is up to
% date (i.e. contains the field "normStructure") [at the moment, only whatNorm='log2' is up to date]
whichField={'normStructure'};
% User input: Choose whether to plot the graph, which takes much longer running time) (plot=1;no plot=0)
plotGraph=0;

if whatNorm==' '
    genefile=sprintf('DevMouseGeneExpression.mat');
else
    genefile=sprintf('DevMouseGeneExpression%s.mat',strcat('_',whatNorm));
end

load(genefile)
load('dataDevMouse.mat')

timePoints={'E11pt5','E13pt5','E15pt5','E18pt5','P4','P14','P28'};
for i=1
    gene3D=MakeMatrix(Exp.Energy.(whichField{i}));
end
geneCorr=cell(length(timePoints),1);
corrCoeffCell=cell(length(timePoints),1);
for i=1:length(timePoints) % for each time point
    slice=squeeze(gene3D(i,:,:))'; % makes a matrix of 78 (structure) x 2100 (genes)
    % filter off structures with more than 10% of genes missing
    isMissing=(sum(~isnan(slice),2) <= 0.1*length(geneList));
    slice_clean=slice(~isMissing,:);
    % only structures with available gene expression are kept
    [~,ia,ib]=intersect(char(structures(~isMissing)),acronymPathlevel5clean(:,1),'stable');
    slice_clean=slice_clean(ia,:);
    % compute correlation coefficient between region pairs
    geneCorr{i} = corrcoef(slice_clean','rows','pairwise');
    % extract the correlation coefficients
    corrCoeff=[];
    for j=2:size(geneCorr{i},2)
        corrCoeff=[corrCoeff;geneCorr{i}(1:(j-1),j)];
    end
    
    y=acronymPathlevel5clean(:,2); 
    acronymPath=y(ib); % these are the acronym paths needed
 
    for j=1:length(acronymPath)
        [iq,ir]=ind2sub4up(j);
        pairsIx{j}=[iq,ir];
    end
 
    % remove the curly brackets

    for j=1:length(acronymPath)
        acronymPath{j}=acronymPath{j}(2:end-1);
    end
    % make a cell containing each structure as a row of cell
    acronymPathCell=cell(length(acronymPath),1);
    % fill up with the acronym path components
    for j=1:length(acronymPath)
        x=strsplit(acronymPath{j},',');
        acronymPathCell{j}=x;
    end
    pairsIx=cell(length(corrCoeff),1);
    for j=1:length(corrCoeff)
        [iq,ir]=ind2sub4up(j);
        pairsIx{j}=[iq,ir];
    end
    % compare acronym paths
    ontoDist=zeros(length(pairsIx),1);
    for j=1:length(pairsIx)
        commonOnes=nnz(ismember(acronymPathCell{pairsIx{j}(1)},acronymPathCell{pairsIx{j}(2)}));
        ontoDist(j)=(length(acronymPathCell{pairsIx{j}(1)})-commonOnes)...
            +(length(acronymPathCell{pairsIx{j}(2)})-commonOnes);
    % arrayfun(@(i1)all(ismember(A(i1,:),B,'rows','stable'),(1:size(A,1))');
    end
    
    % filter off data points with no coexpression data available
    isMissing_coexpress=isnan(corrCoeff);
    corrCoeff_clean=corrCoeff(~isMissing_coexpress);
    ontoDist_clean=ontoDist(~isMissing_coexpress);
    
    %Plot gene coexpression against ontological distance
    f=figure('color','w','units','normalized','outerposition',[0 0 1 1]);
    scatter(ontoDist_clean,corrCoeff_clean)
    ylim([-0.6 1])
    str=sprintf('Developing Mouse %s',timePoints{i});
    title(str)
    xlabel('Ontological distance')
    ylabel('Gene coexpression (correlation coefficient)')
    hold on
    uniqueOntoDist=unique(ontoDist_clean);
    
    % prepare to collect the coexpression data for later use
    corrCoeffCell{i}=cell(length(uniqueOntoDist),1);
    
    % mean of gene coexpression at each ontological distance
    meanCoexpress=zeros(length(uniqueOntoDist),1);
    sdCoexpress=zeros(length(uniqueOntoDist),1);
    range=zeros(length(uniqueOntoDist),1);
    for j=1:length(uniqueOntoDist)
        isRight=(ontoDist_clean==uniqueOntoDist(j));
        corrCoeffCell{i}{j}=corrCoeff_clean(isRight);
        meanCoexpress(j)=mean(corrCoeff_clean(isRight));
        sdCoexpress(j)=std(corrCoeff_clean(isRight));
        range(j)=max(corrCoeff_clean(isRight))-min(corrCoeff_clean(isRight));
    end
    for j=1:length(uniqueOntoDist)
        text(uniqueOntoDist(j),meanCoexpress(j),strcat('mean=',num2str(meanCoexpress(j))))
        text(uniqueOntoDist(j),meanCoexpress(j)-0.1*range(j),strcat('SD=',num2str(sdCoexpress(j))))
        hold on
    end
    cd 'D:\Data\DevelopingAllenMouseAPI-master\Figures\DevMouse_Level5_GeneCoexpression\Ontological distance'
    fileName=sprintf('OntoDistance_DevMouse%s.jpg',timePoints{i});
    saveas(gcf,fileName)
end

%% Plot jitter scatter for each time point
for i=1:length(timePoints)
    BF_JitteredParallelScatter(corrCoeffCell{i})
    hold on 
    str=sprintf('Developing Mouse %s',timePoints{i});
    title(str)
    xlabel('Ontological distance')
    ylabel('Gene coexpression (correlation coefficient)')
    ax = gca;
    ax.XTick=[1 2 3 4 5];
    ax.XTickLabel=num2str(uniqueOntoDist);
    cd 'D:\Data\DevelopingAllenMouseAPI-master\Figures\DevMouse_Level5_GeneCoexpression\Ontological distance'
    fileName=sprintf('OntoDistanceJitter_DevMouse%s.jpg',timePoints{i});
    saveas(gcf,fileName)
end
